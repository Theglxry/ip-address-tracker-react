- get the required google font.
- get api key for ip
- get mapping api (https://leafletjs.com/)
- use seperate axios file
- use seperate seperate
- use context api to pass props through elements
- add gap-5 to the jumbotron
- use .env for the ip address
- try out ipgeolocation.io API ...they have complete details
- prevent the page from reloading when a search is entered.
- configure the input to take only ip numbers or domain




STEPS :
- set up needed files
- start with jumbotron and pass in the searchfield
- the map for bottom half of the page
- the ip result should be absolute 
- frontend mentor and use info . 





//___________ tutorial way__________
// import "leaflet/dist/leaflet.css";
// import L, { marker } from "leaflet";

// import landMarker from "../assets/images/icon-location.svg";
// import { MapContainer, TileLayer } from "react-leaflet";





// const Map = ({ coordinates }) => {
//   const marker = new L.icon({ iconUrl: landMarker });
//   let state = {
//     keyMap: Math.random(),
//   };

//   return (
//     <MapContainer
//       key={state.keyMap}
//       center={[coordinates.latitude, coordinates.longitude]}
//       zoom={18}
//       className="w-full h-3/5 z-0"
//     >
//       <TileLayer
//         attribution="Google Maps"
//         url="https//google.cn/map/vt?lyrs=m@189&gl=cn&x={x}&y={y}&z={z}"
//       >
//         <marker
//           position={[coordinates.lat, coordinates.lng]}
//           icon={marker}
//         ></marker>
//       </TileLayer>
//     </MapContainer>
//   );
// };

// export default Map;

 


// import { useEffect } from "react";
// import locationIcon from "../assets/images/icon-location.svg";
// import L from "leaflet";
// import "leaflet/dist/leaflet.css";

// function MapComponent({ coordinates }) {
//   useEffect(() => {
//     console.log("Coordinates prop in MapComponent: ", coordinates);

//     if (coordinates.latitude && coordinates.longitude) {
//       const map = L.map("map").setView([coordinates.latitude, coordinates.longitude], 13);

//       L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
//         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
//       }).addTo(map);

//       const markerIcon = L.icon({
//         iconUrl: locationIcon,
//         iconSize: [46, 56],
//         iconAnchor: [23, 55],
//       });

//       L.marker([coordinates.latitude, coordinates.longitude], { icon: markerIcon }).addTo(map);
//     }
//   }, [coordinates]);

//   return <div id="map" style={{ height: "400px" }} className="map-container"></div>;
// }
 
 

